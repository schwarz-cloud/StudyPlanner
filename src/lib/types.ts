


// API-aligned type for Course
export interface Course {
  courseId: string | number; 
  code: string;
  title: string;
  language: string;
  semester: string;
  schedule: string; // e.g., "MWF 10:00 AM - 11:00 AM"
}

// API-aligned type for Exam
export interface Exam {
  examId: string | number;
  examTitle: string; 
  courseId: string | number;
  duration: number; 
  startsAt: string; 
  endsAt: string;   
  language: string;
  totalMark: number; 
  generatedAt?: string;
  totalQuestions?: number;
  creatorId?: number;
  fileName?: string;
}

// API-aligned type for Lecture
export interface Lecture {
  lectureId: string | number;
  title: string;
  courseId: string | number;
  startsAt: string; 
  endsAt: string;   
  isDone: boolean; 
  hierarchy?: number;
  createdAt?: string;
  updatedAt?: string;
}

// API-aligned type for Quiz
export interface Quiz {
  quizId: string | number;
  title: string;
  courseId: string | number;
  lectureId: string | number;
  totalMarks: number;
  creationDate: string; // "YYYY-MM-DD" or ISO string
}

// Task remains as is, not covered by new APIs
export interface Task {
  id: string;
  title: string;
  courseId?: string | number;
  dueDate: string; // ISO string or "YYYY-MM-DD"
  priority: 'low' | 'medium' | 'high';
  effort?: string; // e.g., "2 hours"
  status: 'todo' | 'inprogress' | 'done';
  description?: string;
}

// StudySession remains as is, not covered by new APIs
export interface StudySession {
  id: string;
  title: string;
  date: string; // ISO string or "YYYY-MM-DD"
  startTime: string; // e.g., "07:00 PM"
  endTime: string; // e.g., "09:00 PM"
  taskId?: string;
  lectureId?: string | number;
  examId?: string | number;
  type: 'lecture_review' | 'task_work' | 'exam_prep' | 'general_study';
}

export type StudyTimeOption = 'morning' | 'afternoon' | 'evening';
export type StudyTechniqueOption = 'pomodoro' | 'spaced_repetition' | 'feynman';

export interface UserPreferences {
  preferredStudyTimes: Array<StudyTimeOption>;
  studyTechniques: Array<StudyTechniqueOption>;
  defaultSessionLength: number; // in minutes
  defaultBreakCadence: number; // in minutes
  notificationLeadTimes: {
    task: number; // in hours
    session: number; // in hours
    exam: number; // in days
  };
}

// Types for Study Plan generated by AI (remain the same internally)
export interface StudyActivity {
  id: string; 
  startTime: string; // e.g., "09:00 AM"
  endTime: string; // e.g., "10:00 AM"
  description: string;
  type: 'study' | 'break' | 'task_work' | 'exam_prep' | 'lecture_review' | 'quiz_prep' | 'personal' | 'lecture';
  relatedItemId?: string | number; 
  courseId?: string | number; 
  completed: boolean; 
}

export interface StudyPlanDay {
  date: string; // "YYYY-MM-DD"
  dayOfWeek: string; // e.g., "Monday"
  activities: StudyActivity[];
  summary?: string; 
}

export interface StudyPlan {
  startDate: string; // "YYYY-MM-DD"
  endDate: string; // "YYYY-MM-DD"
  dailyPlans: StudyPlanDay[];
  overallSummary?: string; 
}

// Focus Mode Types
export type WhitelistItem = string; // Represents a URL string

export interface PomodoroSession {
  id?: string; // Firestore document ID
  userId: string;
  type: 'focus' | 'break';
  startTime: number; // Timestamp (Date.now())
  configuredDuration: number; // in minutes
  actualDuration?: number; // in minutes, if ended early
  completed: boolean;
  endTime?: number; // Timestamp
}

export interface DistractionAttempt {
    id?: string; // Firestore document ID
    userId: string;
    url: string;
    timestamp: number; // Timestamp (Date.now())
}

// Chatbot "Guru" Types
export interface ChatMessage {
  id: string; // Firestore document ID or client-generated for optimistic updates
  text: string;
  sender: 'user' | 'guru';
  timestamp: Date | null; // Firebase Timestamp will be converted to Date on client
  avatar?: string; // Optional: For Guru's avatar
  name?: string; // Optional: For Guru's name
}

export interface ChatSession {
  id: string;
  userId: string;
  createdAt: Date;
  lastActivity: Date;
  title?: string; // e.g., first user message
  lastMessageSnippet?: string;
}
